class RandomMessageService:
    def __init__(self):
        self.messages = [
            "¬°Hola, mundo!",
            "¬øC√≥mo puedo asistirte hoy?",
            "¬°Que tengas un gran d√≠a!",
            "¬°Sigue sonriendo!",
            "¬°Lo est√°s haciendo genial!"
        ]

    def get_response(self, input_text):
        import random
        return random.choice(self.messages)

class GreetingMessageService:
    def __init__(self):
        self.responses = {
            # Saludos
            'saludos': [
                "¬°Hola! Soy SVAIA, tu asistente de ciberseguridad. ¬øEn qu√© puedo ayudarte hoy?",
                "¬°Buenos d√≠as! Estoy aqu√≠ para ayudarte con temas de seguridad inform√°tica.",
                "¬°Hola! ¬øTienes alguna pregunta sobre vulnerabilidades o seguridad?",
            ],
            # Vulnerabilidades
            'vulnerabilidades': [
                "Las vulnerabilidades m√°s comunes incluyen: XSS (Cross-Site Scripting), SQL Injection, CSRF, y vulnerabilidades de autenticaci√≥n.",
                "Para identificar vulnerabilidades, te recomiendo usar herramientas como OWASP ZAP, Burp Suite, o realizar auditor√≠as de c√≥digo.",
                "Es importante mantener un inventario de vulnerabilidades y clasificarlas por criticidad (baja, media, alta, cr√≠tica).",
            ],
            # Seguridad web
            'seguridad': [
                "Para mejorar la seguridad de tu aplicaci√≥n web, implementa: validaci√≥n de entrada, escape de salida, autenticaci√≥n robusta y autorizaci√≥n adecuada.",
                "Recuerda seguir las mejores pr√°cticas de OWASP Top 10 para prevenir las vulnerabilidades m√°s cr√≠ticas.",
                "La seguridad debe implementarse en capas: red, aplicaci√≥n, datos y usuarios.",
            ],
            # Respuestas generales
            'general': [
                "Como asistente de ciberseguridad, puedo ayudarte con an√°lisis de vulnerabilidades, mejores pr√°cticas de seguridad y protecci√≥n contra ataques.",
                "¬øTe interesa alg√∫n tema espec√≠fico de seguridad? Puedo ayudarte con XSS, SQL injection, CSRF, autenticaci√≥n, o configuraci√≥n segura.",
                "La ciberseguridad es fundamental. ¬øHay alg√∫n aspecto espec√≠fico de tu proyecto que te preocupe desde el punto de vista de seguridad?",
            ]
        }

    def get_response(self, input_text):
        import random
        
        # Convertir a min√∫sculas para an√°lisis
        text_lower = input_text.lower()
        
        # Detectar tipo de consulta
        if any(word in text_lower for word in ['hola', 'buenos', 'buenas', 'saludos', 'hi']):
            return random.choice(self.responses['saludos'])
        elif any(word in text_lower for word in ['vulnerabilidad', 'vuln', 'exploit', 'cve', 'fallo']):
            return random.choice(self.responses['vulnerabilidades'])
        elif any(word in text_lower for word in ['seguridad', 'proteger', 'ataque', 'hack', 'xss', 'sql', 'csrf']):
            return random.choice(self.responses['seguridad'])
        else:
            return random.choice(self.responses['general'])

class AnimalFactsService:
    def __init__(self):
        # IMPORTANTE: Esta clave API no es v√°lida. Necesitas obtener una clave real de OpenRouter.ai
        # Visita https://openrouter.ai/ para obtener tu clave API
        self.api_key = "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"  # Reemplaza con tu clave real
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"

        # Mensaje de error cuando la API no est√° configurada correctamente
        self.api_error_message = """‚ùå **Error de configuraci√≥n de IA**

La clave API de OpenRouter no est√° configurada correctamente.

**Para solucionarlo:**
1. Ve a https://openrouter.ai/
2. Crea una cuenta y obt√©n tu clave API
3. Reemplaza "TU_CLAVE_API_AQUI" en services/message_service.py con tu clave real
4. Reinicia el servidor

Mientras tanto, la IA no estar√° disponible."""

    def get_response(self, input_text):
        import requests
        import json

        # Verificar si la API est√° configurada
        if self.api_key == "TU_CLAVE_API_AQUI":
            return self.api_error_message

        try:
            # Preparar el prompt para que se comporte como un asistente de ciberseguridad
            system_prompt = """Eres SVAIA (Sistema de Soporte para Vulnerabilidades y Amenazas basado en Inteligencia Artificial), un asistente experto en ciberseguridad.

INSTRUCCIONES IMPORTANTES:
- Responde SIEMPRE en espa√±ol
- Usa un tono profesional pero amigable
- NO generes c√≥digo Python a menos que sea espec√≠ficamente solicitado
- Proporciona respuestas conversacionales claras y √∫tiles

Tu especialidad es ayudar con:
‚Ä¢ An√°lisis de vulnerabilidades de seguridad
‚Ä¢ Mejores pr√°cticas de ciberseguridad
‚Ä¢ Protecci√≥n contra ataques (XSS, SQLi, CSRF, etc.)
‚Ä¢ Seguridad en frameworks web (Flask, Django, etc.)
‚Ä¢ Configuraci√≥n segura de sistemas
‚Ä¢ An√°lisis de c√≥digo fuente para detectar problemas de seguridad

Ejemplos de respuestas apropiadas:
- "Para proteger contra XSS en Flask, te recomiendo usar escape autom√°tico..."
- "Las principales vulnerabilidades en aplicaciones web incluyen..."
- "Para mejorar la seguridad de tu base de datos MySQL, deber√≠as..."

Si el usuario hace preguntas no relacionadas con seguridad, conecta amablemente la respuesta con aspectos de seguridad relevantes."""

            response = requests.post(
                url=self.api_url,
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://svaia.local",
                    "X-Title": "SVAIA - Sistema de Vulnerabilidades y Amenazas IA",
                },
                data=json.dumps({
                    "model": "deepseek/deepseek-chat",
                    "messages": [
                        {
                            "role": "system",
                            "content": system_prompt
                        },
                        {
                            "role": "user",
                            "content": input_text
                        }
                    ],
                }),
                timeout=30
            )

            if response.status_code == 200:
                result = response.json()
                if 'choices' in result and len(result['choices']) > 0:
                    return result['choices'][0]['message']['content']
                else:
                    return "‚ùå La IA no pudo generar una respuesta adecuada en este momento."
            elif response.status_code == 401:
                print(f"Error de autenticaci√≥n API: {response.status_code}")
                return "‚ùå **Error de autenticaci√≥n con la IA**\n\nLa clave API no es v√°lida o ha expirado. Por favor, verifica tu clave API en OpenRouter.ai"
            else:
                print(f"Error API: {response.status_code} - {response.text}")
                return f"‚ùå **Error de la IA** (C√≥digo: {response.status_code})\n\nHubo un problema al conectar con el servicio de inteligencia artificial."

        except requests.exceptions.Timeout:
            print("Timeout en la conexi√≥n con OpenRouter API")
            return "‚è±Ô∏è **Timeout de la IA**\n\nLa consulta est√° tardando m√°s de lo esperado. Por favor, int√©ntalo de nuevo."

        except requests.exceptions.RequestException as e:
            print(f"Error de conexi√≥n: {e}")
            return "üåê **Error de conexi√≥n**\n\nNo se pudo conectar con el servicio de IA. Verifica tu conexi√≥n a internet."

        except json.JSONDecodeError as e:
            print(f"Error decodificando JSON: {e}")
            return "‚ùå **Error de formato**\n\nHubo un problema procesando la respuesta de la IA."

        except Exception as e:
            print(f"Error inesperado: {e}")
            return f"‚ùå **Error inesperado**\n\nOcurri√≥ un error no previsto: {str(e)}"
